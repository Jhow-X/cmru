import OpenAI from "openai";
import fs from "fs/promises";
import path from "path";

const DEFAULT_MODEL = "gpt-4o";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY || "" });

let vectorStoreId: string | null = null;

// Cria um Vector Store e envia arquivos
export async function createVectorStoreFromFiles(filePaths: string[]): Promise<string> {
  const uploadedFiles = await Promise.all(
    filePaths.map(file =>
      openai.files.create({
        file: fs.createReadStream(file),
        purpose: "assistants",
      })
    )
  );

  const store = await openai.beta.vectorStores.create({
    name: "legal-context-store",
    file_ids: uploadedFiles.map(f => f.id),
  });

  vectorStoreId = store.id;
  return store.id;
}

// Geração com ou sem contexto de arquivos
export async function generateGptResponse(
  message: string,
  systemInstructions: string,
  model: string = DEFAULT_MODEL,
  temperature: number = 70,
  files: string[] = []
): Promise<string> {
  try {
    if (files.length > 0) {
      // Cria Vector Store se ainda não existir
      if (!vectorStoreId) {
        vectorStoreId = await createVectorStoreFromFiles(files);
      }

      // Cria assistant com acesso ao vector store
      const assistant = await openai.beta.assistants.create({
        name: "Assistente Jurídico com Contexto",
        model,
        tools: [{ type: "retrieval" }],
        tool_resources: {
          vector_stores: [vectorStoreId],
        },
        instructions: systemInstructions,
      });

      // Cria um thread e envia mensagem
      const thread = await openai.beta.threads.create();

      await openai.beta.threads.messages.create(thread.id, {
        role: "user",
        content: message,
      });

      const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
      });

      // Espera a execução terminar
      let runStatus = run.status;
      while (runStatus !== "completed" && runStatus !== "failed") {
        const updatedRun = await openai.beta.threads.runs.retrieve(thread.id, run.id);
        runStatus = updatedRun.status;
        await new Promise(res => setTimeout(res, 1000));
      }

      if (runStatus === "failed") {
        throw new Error("Execução falhou.");
      }

      const messages = await openai.beta.threads.messages.list(thread.id);
      const lastMessage = messages.data.find(m => m.role === "assistant");
      return lastMessage?.content[0].text.value || "Resposta não encontrada.";
    }

    // Geração simples (sem arquivos)
    const response = await openai.chat.completions.create({
      model,
      messages: [
        {
          role: "system",
          content:
            systemInstructions +
            (files.length > 0 ? `\n\nArquivos de referência disponíveis: ${files.join(", ")}` : ""),
        },
        {
          role: "user",
          content: message,
        },
      ],
      temperature: temperature / 100,
      max_tokens: 2000,
    });

    return response.choices[0].message.content || "Desculpe, não consegui gerar uma resposta.";
  } catch (error) {
    console.error("Erro ao gerar resposta:", error);
    throw new Error("Erro ao processar sua mensagem. Tente novamente.");
  }
}

// Funções específicas (inalteradas, exceto se você quiser usar arquivos):
export async function analyzeLegalDocument(documentText: string): Promise<string> {
  const systemPrompt = `
    Você é um assistente jurídico especializado na análise de documentos legais.
    Sua tarefa é analisar o documento fornecido e extrair:
    1. Principais pontos legais
    2. Possíveis problemas ou inconsistências
    3. Referências a leis e jurisprudência relevantes
    4. Recomendações para o magistrado

    Forneça sua análise de forma estruturada e concisa.
  `;
  return generateGptResponse(documentText, systemPrompt);
}

export async function draftLegalResponse(caseDetails: string, responseType: string): Promise<string> {
  const systemPrompt = `
    Você é um assistente jurídico especializado na redação de documentos legais.
    Sua tarefa é redigir um(a) ${responseType} com base nos detalhes do caso fornecido.
    Use linguagem formal e jurídica apropriada.
    Estruture o documento conforme os padrões jurídicos brasileiros.
    Inclua citações de leis e jurisprudência relevantes quando apropriado.
  `;
  return generateGptResponse(caseDetails, systemPrompt);
}

export async function getLegalReferences(query: string): Promise<string> {
  const systemPrompt = `
    Você é um assistente jurídico especializado em pesquisa legal.
    Sua tarefa é fornecer referências legais relevantes para a consulta fornecida, incluindo:
    1. Leis e códigos aplicáveis
    2. Jurisprudência relevante
    3. Doutrinas e entendimentos predominantes
    4. Súmulas e orientações de tribunais superiores

    Forneça sua resposta de forma estruturada e com citações precisas.
  `;
  return generateGptResponse(query, systemPrompt);
}

export async function getAvailableModels(): Promise<string[]> {
  try {
    const list = await openai.models.list();
    const models: string[] = [];

    for await (const model of list) {
      if (
        model.id.includes("gpt") &&
        !model.id.includes("instruct") &&
        !model.id.includes("babbage") &&
        !model.id.includes("ada") &&
        !model.id.includes("davinci")
      ) {
        models.push(model.id);
      }
    }

    return models.sort().reverse();
  } catch (error) {
    console.error("Erro ao obter modelos disponíveis:", error);
    return ["gpt-4o", "gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"];
  }
}

export default {
  generateGptResponse,
  analyzeLegalDocument,
  draftLegalResponse,
  getLegalReferences,
  getAvailableModels,
  createVectorStoreFromFiles,
};
